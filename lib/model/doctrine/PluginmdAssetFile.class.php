<?php

/**
 * PluginmdAssetFile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginmdAssetFile extends BasemdAssetFile {

  private $dimensions;

  public function getCachePath() {
    $relative_path = $this->getRootPath();
    return str_replace(sfConfig::get('app_sf_media_browser_root_dir', 'uploads'), 'cache', $relative_path);
  }
  
  public function getRootPath() {
    return sfConfig::get('sf_web_dir') . $this->getMdAssetAlbum()->getRelativePath();
  }

  public function getPath() {
    return sfConfig::get('sf_web_dir') . $this->getMdAssetAlbum()->getRelativePath() . '/' . $this->getFilename();
  }

  /**
   *
   * @return string icon file name
   */
  public function getIcon() {
    if ($this->isImage()) {
      return $this->getMdAssetAlbum()->getRelativePath() . '/.thumbnails/' . $this->getFilename();
    }
    return sfMediaBrowserUtils::getIconFromExtension(trim($this->getExtension(), '.'));
  }

  /**
   * 
   * @param integer $width
   * @param integer $height
   * @param enum(original, resize, crop, resizecrop) $code
   * @param boolean $proportional
   * @param integer $left
   * @param integer $top
   * @return string
   * 
   * @throws Exception
   */
  public function getUrl($width, $height, $code = 'original', $proportional = false, $left = 0, $top = 0) {
    if ($code == 'original') return $this->getMdAssetAlbum()->getRelativePath() . '/' . $this->getFilename();

    $cacheRootDir = $this->getCachePath() . '/.' . $width . 'x' . $height;
    $cacheFile = $cacheRootDir . '/' . $this->getFilename();

    if (!file_exists($cacheFile)) {
      try {
        $img = new sfImage($this->getPath());

        switch($code){
          case 'resize': $img->resize($width, $height, true, $proportional); break;
          case 'crop': $img->crop($left, $top, $width, $height); break;
          case 'resizecrop': $img->resizecrop($width, $height); break;
          default: throw new Exception('invalid code'); break;
        }

        if (!sfMediaBrowserUtils::checkDirectory($cacheRootDir)) {
          throw new Exception('Filesystem fail');
        }

        $img->saveAs($cacheFile);
      } catch (Exception $e) {
        echo $e->getMessage();
        return $this->getMdAssetAlbum()->getRelativePath() . '/' . $this->getFilename();
      }
    }

    return str_replace(sfConfig::get('app_sf_media_browser_root_dir', 'uploads'), 'cache', $this->getMdAssetAlbum()->getRelativePath()) . '/.' . $width . 'x' . $height . '/' . $this->getFilename();
  }

  public function getSize() {
    $size = $this->getFilesize();

    $sizes = array('B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');

    $retstring = '%01.2f %s';

    $lastsizestring = end($sizes);

    foreach ($sizes as $sizestring) {
      if ($size < 1024) {
        break;
      }
      if ($sizestring != $lastsizestring) {
        $size /= 1024;
      }
    }
    if ($sizestring == $sizes[0]) {
      $retstring = '%01d %s';
    } // los Bytes normalmente no son fraccionales

    return sprintf($retstring, $size, $sizestring);
  }

  public function isImage() {
    return sfMediaBrowserUtils::getTypeFromExtension(trim($this->getExtension(), '.')) == 'image';
  }

  public function getDimensions() {

    if ($this->isImage()) {
      if (!$this->dimensions) {
        $this->dimensions = getimagesize(sfConfig::get('sf_web_dir') . $this->getMdAssetAlbum()->getRelativePath() . '/' . $this->getFilename());
      }
      return $this->dimensions;
    }
    return false;
  }

  public function getWidth() {
    if ($this->isImage()) {
      $dimensions = $this->getDimensions();
      return $dimensions[0];
    }
    return 0;
  }

  public function getHeight() {
    if ($this->isImage()) {
      $dimensions = $this->getDimensions();
      return $dimensions[1];
    }
    return 0;
  }

  public function render() {
    
  }

  public function postDelete($event) {
    parent::postDelete($event);

    // try to delete the thumbnail if exists
    try {
      $files = sfFinder::type('file')->name($this->getFilename())->in($this->getRootPath());
      foreach ($files as $file) {
        @unlink($file);
      }
    } catch (sfException $e) {
      
    }
    
  }

}
